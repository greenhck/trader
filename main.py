import json
import os
import sys
import yfinance as yf
from datetime import datetime
import gspread 
from google.oauth2.service_account import Credentials

# ==========================================================
# ‚≠ê‚≠ê‚≠ê ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä (‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§≠‡§∞‡•Ä ‡§π‡•Å‡§à) ‚≠ê‚≠ê‚≠ê
# ==========================================================
# 1. ‡§Ü‡§™‡§ï‡•Ä Google Sheet ID (‡§¶‡•ã‡§®‡•ã‡§Ç ‡§µ‡•â‡§ö‡§≤‡§ø‡§∏‡•ç‡§ü ‡§î‡§∞ ‡§≤‡§æ‡§á‡§µ ‡§°‡•á‡§ü‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è)
SHEET_ID = '1UANOBVncsHF-B_BURxm-dfGmho9pIhZPE2TcN_OK0Ws' 

# 2. ‡§µ‡•â‡§ö‡§≤‡§ø‡§∏‡•ç‡§ü ‡§∂‡•Ä‡§ü ‡§Æ‡•á‡§Ç ‡§µ‡§π ‡§ï‡•â‡§≤‡§Æ ‡§®‡§æ‡§Æ ‡§ú‡§π‡§æ‡§Å ‡§∏‡•ç‡§ü‡•â‡§ï‡•ç‡§∏ ‡§≤‡§ø‡§ñ‡•á ‡§π‡•à‡§Ç
STOCKS_COLUMN_NAME = 'Stocks' 

# 3. ‡§µ‡•â‡§ö‡§≤‡§ø‡§∏‡•ç‡§ü ‡§°‡•á‡§ü‡§æ ‡§ü‡•à‡§¨ ‡§ï‡§æ ‡§®‡§æ‡§Æ
WATCHLIST_TAB_NAME = 'Watchlists' 

# 4. ‡§≤‡§æ‡§á‡§µ ‡§°‡•á‡§ü‡§æ ‡§∂‡•Ä‡§ü ‡§ï‡§æ ‡§ü‡•à‡§¨ ‡§®‡§æ‡§Æ (‡§ú‡§π‡§æ‡§Å ‡§°‡•á‡§ü‡§æ ‡§≤‡§ø‡§ñ‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ)
LIVE_DATA_TAB_NAME = 'LivePrices'
# ==========================================================

def initialize_google_sheets_client():
    """Initializes gspread client using the service account JSON."""
    try:
        # ‡§π‡§Æ ‡§Æ‡§æ‡§®‡§§‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø GitHub Secret 'GCP_SHEETS_SERVICE_ACCOUNT' ‡§Æ‡•á‡§Ç JSON ‡§π‡•à
        cred_json = os.environ.get('GCP_SHEETS_SERVICE_ACCOUNT')
        if not cred_json:
            raise ValueError("‚ùå Error: GCP_SHEETS_SERVICE_ACCOUNT GitHub Secret not found.")
        
        scopes = ['https://www.googleapis.com/auth/spreadsheets', 
                  'https://www.googleapis.com/auth/drive']
        
        creds_info = json.loads(cred_json)
        creds = Credentials.from_service_account_info(creds_info, scopes=scopes)
        client = gspread.authorize(creds)
        print("‚úì Google Sheets client initialized successfully.")
        return client
        
    except Exception as e:
        print(f"‚ùå Error initializing Google Sheets client: {e}")
        # ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§®‡•á SERVICE ACCOUNT JSON ‡§ï‡•ã ‡§∏‡§π‡•Ä ‡§¢‡§Ç‡§ó ‡§∏‡•á ‡§ï‡•â‡§™‡•Ä ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à
        sys.exit(1)

def get_unique_stocks_from_sheets(gc):
    """Reads all unique stock symbols from the Watchlist Sheet."""
    try:
        spreadsheet = gc.open_by_key(SHEET_ID)
        # Tab ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
        worksheet = spreadsheet.worksheet(WATCHLIST_TAB_NAME) 
        
        # get_all_records() headers ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§°‡§ø‡§ï‡•ç‡§∂‡§®‡§∞‡•Ä ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§™‡§¢‡§º‡§§‡§æ ‡§π‡•à
        data = worksheet.get_all_records()
        unique_stocks = set()
        
        for row in data:
            stocks_string = row.get(STOCKS_COLUMN_NAME, '') 
            if stocks_string:
                # ‡§∏‡•ç‡§ü‡•â‡§ï‡•ç‡§∏ ‡§ï‡•ã ‡§ï‡•â‡§Æ‡§æ ‡§∏‡•á ‡§Ö‡§≤‡§ó ‡§ï‡§∞‡•á‡§Ç
                stocks_list = [s.strip() for s in stocks_string.split(',') if s.strip()]
                unique_stocks.update(stocks_list)

        print(f"‚úì Found {len(unique_stocks)} unique stock symbols from Sheet.")
        return list(unique_stocks)
        
    except Exception as e:
        print(f"‚ùå Error reading data from Watchlist Sheet: {e}. Check TAB Name or Column Name.")
        # ‡§Ø‡§¶‡§ø ‡§ü‡•à‡§¨ ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§§‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§è‡§∞‡§∞ ‡§Ü‡§è‡§ó‡§æ
        return []

def fetch_stock_data(symbol):
    """Fetch real-time data for a single stock"""
    try:
        stock = yf.Ticker(symbol)
        info = stock.info
        history = stock.history(period="1d") 
        
        if history.empty: return None
        
        current_price = history['Close'].iloc[-1]
        previous_close = info.get('previousClose', current_price) 
        
        try:
            prev_close_history = stock.history(period="2d", interval="1d")
            if len(prev_close_history) > 1:
                previous_close = prev_close_history['Close'].iloc[-2]
        except Exception:
             pass

        change = current_price - previous_close
        percent_change = (change / previous_close) * 100 if previous_close else 0
        
        return {
            'symbol': symbol,
            'ltp': round(current_price, 2),
            'change': round(change, 2),
            'percent': round(percent_change, 2),
            'lastUpdated': datetime.now().isoformat(),
        }
    
    except Exception as e:
        print(f"‚ö†Ô∏è  Error fetching {symbol}: {e}")
        return None

def update_data_in_sheets(gc, all_stock_data):
    """Writes all live stock data to the Live Data Sheet."""
    try:
        spreadsheet = gc.open_by_key(SHEET_ID)
        worksheet = spreadsheet.worksheet(LIVE_DATA_TAB_NAME) 
        
        headers = ['symbol', 'ltp', 'change', 'percent', 'lastUpdated']
        
        data_rows = [headers]
        for symbol, data in all_stock_data.items():
            if data:
                data_rows.append([data.get(h) for h in headers])

        # ‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§∏‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§®‡§Ø‡§æ ‡§°‡•á‡§ü‡§æ ‡§≤‡§ø‡§ñ‡•á‡§Ç
        worksheet.clear()
        worksheet.update('A1', data_rows) 
        
        print(f"\n‚úì Successfully updated {len(all_stock_data)} stock prices in Google Sheet '{LIVE_DATA_TAB_NAME}'.")
        return True
        
    except Exception as e:
        print(f"‚ùå Error updating Live Data Sheet: {e}. Check TAB Name or Sheet permissions.")
        # ‡§Ø‡§¶‡§ø 'LivePrices' ‡§ü‡•à‡§¨ ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§Ø‡§æ ‡§∂‡•á‡§Ø‡§∞‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à ‡§§‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§è‡§∞‡§∞ ‡§Ü‡§è‡§ó‡§æ‡•§
        return False

def main():
    print("\n" + "="*60)
    print("üîÑ Starting Google Sheets Stock Data Update")
    print("="*60 + "\n")
    
    gc = initialize_google_sheets_client()
    
    print("üìä Fetching unique stocks from Watchlist Sheet...")
    unique_symbols = get_unique_stocks_from_sheets(gc)
    
    if not unique_symbols:
        print("\n‚ö†Ô∏è  No stocks found in the Watchlist Sheet. Skipping stock update.")
        # ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø Watchlists ‡§ü‡•à‡§¨ ‡§Æ‡•á‡§Ç ‡§°‡•á‡§ü‡§æ ‡§π‡•à
        return

    print(f"\nüìà Fetching data for {len(unique_symbols)} unique stock(s)...")
    all_stock_data = {}
    
    for symbol in unique_symbols:
        stock_data = fetch_stock_data(symbol)
        if stock_data:
            all_stock_data[symbol] = stock_data
        # ‡§Ø‡§¶‡§ø yfinance ‡§∏‡•á ‡§°‡•á‡§ü‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§π‡§Æ ‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡•á‡§Ç‡§ó‡•á, ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§ï‡•ã ‡§®‡§ú‡§º‡§∞‡§Ö‡§Ç‡§¶‡§æ‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á

    print("\nüíæ Writing live data back to Google Sheet...")
    update_data_in_sheets(gc, all_stock_data)
    
    print("\n" + "="*60)
    print("üìã Update Summary")
    print("="*60)
    print(f"‚úì Stocks fetched: {len(all_stock_data)}")
    print(f"üïí Completed at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S IST')}")
    print("="*60 + "\n")

if __name__ == '__main__':
    main()

# EOF
